// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace WorkloadsDb.Model
{
    public partial class WorkloadsContext : DbContext
    {
        public WorkloadsContext()
        {
        }

        public WorkloadsContext(DbContextOptions<WorkloadsContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Assignment> Assignments { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Workload> Workloads { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=WorkloadsDev;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Person>(entity =>
            {
                entity.Property(e => e.Firstname).HasMaxLength(200);
            });

            modelBuilder.Entity<Workload>(entity =>
            {
                entity.HasIndex(e => e.AssignmentId, "IX_Workloads_AssignmentId");

                entity.HasIndex(e => e.PersonId, "IX_Workloads_PersonId");

                entity.HasOne(d => d.Assignment)
                    .WithMany(p => p.Workloads)
                    .HasForeignKey(d => d.AssignmentId);

                entity.HasOne(d => d.Person)
                    .WithMany(p => p.Workloads)
                    .HasForeignKey(d => d.PersonId);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}